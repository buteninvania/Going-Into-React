{"version":3,"sources":["hoc/authRedirect.jsx","components/Profile/AvatarDescription/avatarDescription.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/AvatarDescription/ProfileStatusWithHooks.jsx","components/Profile/AvatarDescription/ProfileDataForm.jsx","components/Profile/AvatarDescription/AvatarDescription.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","witchAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","className","p","statusUser","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataForm","reduxForm","form","handleSubmit","profile","error","onSubmit","f","formSummaryError","fullName","createField","Input","TextArea","Object","keys","contacts","map","key","ProfileData","isOwner","goToEditMode","onClick","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","AvatarDescription","Preloader","wallImage","alt","src","avatar","photos","large","urlPhoto","addPhoto","type","target","files","length","savePhoto","discription","initialValues","FormData","saveProfile","then","Post","posts","item","text","message","like","MyPosts","memo","console","log","postElements","profilePage","postData","m","id","wall","addPost","AddPostFormRedux","values","newPostText","maxLength15","maxLengthCreator","Field","validate","requiredField","component","name","placeholder","MyPostsContainer","dispatch","addPostActionCreator","Profile","ProfileContainer","userID","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","userId","withRouter"],"mappings":"wNAKIA,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAGVE,EAAoB,SAACC,GAAe,IACvCC,EADsC,uKAGpC,OAAIC,KAAKC,MAAMN,OACR,kBAACG,EAAcE,KAAKC,OADG,kBAAC,IAAD,CAAUC,GAAI,eAHR,GACZC,IAAML,WAQtC,OADqCM,YAAQX,EAARW,CAAoCL,K,oBChB7EM,EAAOC,QAAU,CAAC,UAAY,qCAAqC,OAAS,kCAAkC,YAAc,uCAAuC,WAAa,sCAAsC,SAAW,sC,oBCAjOD,EAAOC,QAAU,CAAC,KAAO,sBAAsB,QAAU,2B,oBCAzDD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,KAAO,mBAAmB,KAAO,qB,8HCqC9DC,EAlCgB,SAACN,GAAW,IAAD,EACPO,oBAAS,GADF,mBACjCC,EADiC,KACvBC,EADuB,OAEXF,mBAASP,EAAMU,QAFJ,mBAEjCA,EAFiC,KAEzBC,EAFyB,KAItCC,qBAAU,WACND,EAAUX,EAAMU,UACjB,CAACV,EAAMU,SAYV,OACI,8BACMF,GACF,6BACI,0BAAMK,cAfO,WACrBJ,GAAY,IAcmCK,UAAWC,IAAEC,YAChD,sCADJ,IACoBhB,EAAMU,QAAU,iBAGvCF,GACD,6BACI,2BAAOS,SAdI,SAACC,GACpBP,EAAUO,EAAEC,cAAcC,QAaeA,MAAOV,EAAQW,WAAW,EAAMC,OAlBlD,WACvBb,GAAY,GACZT,EAAMuB,aAAab,S,oDCsBZc,EAFOC,YAAU,CAACC,KAAM,eAAjBD,EA9BO,SAAC,GAAoC,IAAnCE,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,MAClD,OACI,0BAAMC,SAAUH,GACZ,6BACI,yCAEHE,GAAS,yBAAKf,UAAWiB,IAAEC,kBAAmBH,GAC/C,yBAAKf,UAAWC,IAAEkB,UAAlB,cACgBC,YAAY,WAAY,GAAIC,IAAO,cAEnD,6BACI,kDADJ,IACgCD,YAAY,iBAAkB,GAAIC,IAAO,GAAI,aAE7E,6BACI,mDAAyBD,YAAY,4BAA6B,GAAIE,IAAU,eAEpF,6BACI,wCADJ,IACsBF,YAAY,UAAW,GAAIE,IAAU,aAG3D,6BACI,yCADJ,IACuBC,OAAOC,KAAKV,EAAQW,UAAUC,KAAI,SAAAC,GACrD,OAAO,yBAAK3B,UAAWC,IAAEwB,SAAUE,IAAKA,GACpC,2BAAIA,EAAJ,KAAWP,YAAY,YAAcO,EAAK,GAAIN,IAAOM,GAArD,cCyBdC,EAAc,SAAC,GAAsC,IAArCd,EAAoC,EAApCA,QAASe,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,aACpC,OAEI,6BACKD,GAAW,6BACR,4BAAQE,QAASD,GAAjB,SAEJ,yBAAK9B,UAAWC,IAAEkB,UAAU,2BAAIL,EAAQK,WACxC,6BAAK,kDAAL,IAAiCL,EAAQkB,eAAiB,MAAQ,MACjElB,EAAQkB,gBACT,6BACI,mDAAyBlB,EAAQmB,4BAErC,6BAAK,wCAAL,IAAuBnB,EAAQoB,SAC/B,6BACI,yCADJ,IACuBX,OAAOC,KAAKV,EAAQW,UAAUC,KAAI,SAAAC,GACrD,OAAO,kBAAC,EAAD,CAASA,IAAKA,EAAKQ,aAAcR,EAAKS,aAActB,EAAQW,SAASE,WAOtFU,EAAU,SAAC,GAAkC,IAAjCF,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aAC5B,OAAO,yBAAKpC,UAAWC,IAAEwB,UAAU,2BAAIU,EAAJ,KAA5B,IAAoDC,IAGhDE,EAzEW,SAACpD,GAAW,IAAD,EAEHO,oBAAS,GAFN,mBAE5BC,EAF4B,KAElBC,EAFkB,KAIjC,IAAKT,EAAM4B,QACP,OAAO,kBAACyB,EAAA,EAAD,MAgBX,OACI,6BACI,yBAAKvC,UAAWC,IAAEuC,WACd,yBAAKC,IAAI,YACJC,IAAI,yGAEb,yBAAK1C,UAAWC,IAAE0C,QACd,6BACI,yBAAKF,IAAI,SAASC,IAAKxD,EAAM4B,QAAQ8B,OAAOC,OAASC,MACpD5D,EAAM2C,SAAW,2BAAO7B,UAAWC,IAAE8C,SAAUC,KAAM,OAAQ7C,SAvBlD,SAACC,GACrBA,EAAE6C,OAAOC,MAAMC,QACfjE,EAAMkE,UAAUhD,EAAE6C,OAAOC,MAAM,QAuB3B,yBAAKlD,UAAWC,IAAEoD,aACb3D,EACK,kBAAC,EAAD,CAAiB4D,cAAepE,EAAM4B,QAASE,SArBpD,SAACuC,GACdrE,EAAMsE,YAAYD,GAAUE,MACxB,WACI9D,GAAY,OAkBiEmB,QAAS5B,EAAM4B,UAClF,kBAAC,EAAD,CAAagB,aAAc,WACzBnC,GAAY,IACbmB,QAAS5B,EAAM4B,QAASe,QAAS3C,EAAM2C,UAC9C,6BAAK,kBAAC,EAAD,CAAwBjC,OAAQV,EAAMU,OAAQa,aAAcvB,EAAMuB,oB,4CC/B5EiD,EAZF,SAACxE,GACV,OACI,yBAAKc,UAAa2D,IAAMC,MACpB,yBAAKlB,IAAI,wEAAwED,IAAI,KACrF,yBAAKzC,UAAa2D,IAAME,MAClB3E,EAAM4E,SAEZ,yBAAK9D,UAAa2D,IAAMI,MAAxB,QAAqC7E,EAAM6E,KAA3C,O,gBCFNC,EAAU5E,IAAM6E,MAAK,SAAA/E,GACvBgF,QAAQC,IAAI,UACZ,IACIC,EADQlF,EAAMmF,YACOC,SAAS5C,KAAI,SAAA6C,GAAC,OAAI,kBAAC,EAAD,CAAMT,QAASS,EAAET,QAASnC,IAAK4C,EAAEC,GAAIT,KAAMQ,EAAER,UAGxF,OACI,yBAAK/D,UAAWuE,IAAEE,MACd,yBAAKzE,UAAWuE,IAAEG,SACd,wCACA,kBAACC,EAAD,CAAkB3D,SANhB,SAAC4D,GAAD,OAAY1F,EAAMwF,QAAQE,EAAOC,iBAQvC,6BACKT,OAMbU,EAAcC,YAAiB,IAe7BJ,EAAmBhE,YAAU,CAC/BC,KAAM,WADeD,EAdL,SAACzB,GAEjB,OACI,0BAAM8B,SAAU9B,EAAM2B,cAClB,6BACI,kBAACmE,EAAA,EAAD,CAAOC,SAAU,CAACC,IAAeJ,GAAcK,UAAW7D,IAAU8D,KAAK,cAClEC,YAAa,mBAExB,6BACI,iDASDrB,I,QCxBAsB,EAFUjG,aAdH,SAACV,GACnB,MAAO,CACH0F,YAAa1F,EAAM0F,gBAGF,SAACkB,GACtB,MAAO,CACHb,QAAS,SAACG,GACNU,EAASC,YAAqBX,QAMjBxF,CAA6C2E,GCDvDyB,EAfC,SAACvG,GACb,OACI,6BACI,kBAAC,EAAD,CACIkE,UAAWlE,EAAMkE,UACjBvB,QAAS3C,EAAM2C,QACff,QAAS5B,EAAM4B,QACflB,OAAQV,EAAMU,OACda,aAAcvB,EAAMuB,aACpB+C,YAAatE,EAAMsE,cACvB,kBAAC,EAAD,Q,wBCNNkC,E,+KAGE,IAAIC,EAAS1G,KAAKC,MAAM0G,MAAMC,OAAOF,OAChCA,IACDA,EAAS1G,KAAKC,MAAM4G,mBAEhB7G,KAAKC,MAAM6G,QAAQC,KAAK,UAGhC/G,KAAKC,MAAM+G,eAAeN,GAC1B1G,KAAKC,MAAMgH,UAAUP,K,0CAIrB1G,KAAKkH,mB,yCAGUC,EAAWC,EAAWC,GAClCrH,KAAKC,MAAM0G,MAAMC,OAAOF,QAAUS,EAAUR,MAAMC,OAAOF,QAC5D1G,KAAKkH,mB,+BAKL,OACI,kBAAC,EAAD,iBAAalH,KAAKC,MAAlB,CACS4B,QAAS7B,KAAKC,MAAM4B,QACpBlB,OAAQX,KAAKC,MAAMU,OACnBa,aAAcxB,KAAKC,MAAMuB,aACzBoB,SAAU5C,KAAKC,MAAM0G,MAAMC,OAAOF,OAClCvC,UAAWnE,KAAKC,MAAMkE,iB,GA/BZhE,IAAML,WA4CtBwH,sBACXlH,aATkB,SAACV,GAAD,MAAY,CAC9BmC,QAASnC,EAAM0F,YAAYvD,QAC3BlB,OAAQjB,EAAM0F,YAAYzE,OAC1BkG,iBAAkBnH,EAAME,KAAK2H,OAC7B5H,OAAQD,EAAME,KAAKD,UAKM,CAACqH,mBAAgBC,cAAWzF,iBAAc2C,cAAWI,kBAC9EiD,IACA3H,IAHWyH,CAIbb","file":"static/js/3.dec09b0e.chunk.js","sourcesContent":["import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n});\n\nexport const witchAuthRedirect = (Component) => {\n    class RedirectComponent extends React.Component {\n        render() {\n            if(!this.props.isAuth) return <Redirect to={\"/login\"} />\n            return <Component {...this.props} />\n        }\n    }\n\n    let ConnectedAuthRederectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\n    return ConnectedAuthRederectComponent\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wallImage\":\"avatarDescription_wallImage__19baP\",\"avatar\":\"avatarDescription_avatar__2sWD7\",\"discription\":\"avatarDescription_discription__2IFhU\",\"statusUser\":\"avatarDescription_statusUser__cJfqa\",\"contacts\":\"avatarDescription_contacts__1QPzT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wall\":\"MyPosts_wall__1c8gn\",\"addPost\":\"MyPosts_addPost__qj3M7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\",\"text\":\"Post_text__3_Vii\",\"like\":\"Post_like__oViQh\"};","import React, {useEffect, useState} from \"react\";\nimport p from \"./avatarDescription.module.css\";\n\n\nconst ProfileStatusWithHooks = (props) => {\n    let [editMode, setEditMode]  = useState(false);\n    let [status, setStatus]  = useState(props.status);\n\n    useEffect(()=>{\n        setStatus(props.status)\n    }, [props.status]);\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n    const deActivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (\n        <div>\n            {!editMode &&\n            <div>\n                <span onDoubleClick={activateEditMode} className={p.statusUser}>\n                    <b>Status:</b> {props.status || \"no status...\"}\n                </span>\n            </div>}\n            {editMode &&\n            <div>\n                <input onChange={onStatusChange} value={status} autoFocus={true} onBlur={deActivateEditMode}/>\n            </div>}\n        </div>\n    )\n}\n\nexport default ProfileStatusWithHooks;","import React from \"react\";\nimport p from \"./avatarDescription.module.css\";\nimport f from \"./../../commons/FormsControls/FormsControls.module.css\"\nimport {createField, Input, TextArea} from \"../../commons/FormsControls/FormsControls\";\nimport {reduxForm} from \"redux-form\";\n\nconst ProfileDataFormRedux = ({handleSubmit, profile, error}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <button>Save</button>\n            </div>\n            {error && <div className={f.formSummaryError}>{error}</div>}\n            <div className={p.fullName}>\n                Full name: {createField(\"fullName\", [], Input, \"Full name\")}\n            </div>\n            <div>\n                <b>Looking for a job: </b> {createField(\"lookingForAJob\", [], Input, \"\", \"checkbox\")}\n            </div>\n            <div>\n                <b>Professional skills: {createField(\"lookingForAJobDescription\", [], TextArea, \"My skills\")}</b>\n            </div>\n            <div>\n                <b>About me:</b> {createField(\"aboutMe\", [], TextArea, \"About me\")}\n            </div>\n\n            <div>\n                <b>Contacts: </b> {Object.keys(profile.contacts).map(key => {\n                return <div className={p.contacts} key={key}>\n                    <b>{key}: {createField(\"contacts.\" + key, [], Input, key)} </b>\n                </div>\n            })}\n            </div>\n        </form>\n    )\n}\nlet ProfileDataForm = reduxForm({form: \"editProfile\"})(ProfileDataFormRedux);\n\nexport default ProfileDataForm;","import React, {useState} from 'react';\nimport p from \"./avatarDescription.module.css\";\nimport Preloader from \"../../commons/Preloader/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport urlPhoto\n    from \"./../../commons/img/computer-icons-user-profile-clip-art-png-favpng-5c0bJPDhifwVUMpsCcT9yXUJw.jpg\";\nimport ProfileDataForm from \"./ProfileDataForm\";\n\nconst AvatarDescription = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    const onMainPhotoSelected = (e) => {\n        if (e.target.files.length) {\n            props.savePhoto(e.target.files[0]);\n        }\n    }\n\n    const onSubmit = (FormData) => {\n        props.saveProfile(FormData).then(\n            () => {\n                setEditMode(false);\n            }\n        );\n    }\n\n    return (\n        <div>\n            <div className={p.wallImage}>\n                <img alt=\"CuberPunk\"\n                     src='https://s1.1zoom.ru/big3/984/Canada_Parks_Lake_Mountains_Forests_Scenery_Rocky_567540_3840x2400.jpg'/>\n            </div>\n            <div className={p.avatar}>\n                <div>\n                    <img alt=\"avatar\" src={props.profile.photos.large || urlPhoto}/>\n                    {props.isOwner && <input className={p.addPhoto} type={\"file\"} onChange={onMainPhotoSelected}/>}\n                </div>\n                <div className={p.discription}>\n                    {editMode\n                        ? <ProfileDataForm initialValues={props.profile} onSubmit={onSubmit} profile={props.profile}/>\n                        : <ProfileData goToEditMode={() => {\n                            setEditMode(true)\n                        }} profile={props.profile} isOwner={props.isOwner}/>}\n                    <div><ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/></div>\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\n    return (\n\n        <div>\n            {isOwner && <div>\n                <button onClick={goToEditMode}>Edit</button>\n            </div>}\n            <div className={p.fullName}><b>{profile.fullName}</b></div>\n            <div><b>Looking for a job: </b> {profile.lookingForAJob ? \"yes\" : \"no\"}</div>\n            {profile.lookingForAJob &&\n            <div>\n                <b>Professional skills: {profile.lookingForAJobDescription}</b>\n            </div>}\n            <div><b>About me:</b> {profile.aboutMe}</div>\n            <div>\n                <b>Contacts: </b> {Object.keys(profile.contacts).map(key => {\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\n            })}\n            </div>\n        </div>\n    )\n}\n\nconst Contact = ({contactTitle, contactValue}) => {\n    return <div className={p.contacts}><b>{contactTitle}:</b> {contactValue}</div>\n}\n\nexport default AvatarDescription;","import React from 'react';\nimport posts from \"./Post.module.css\";\n\nconst Post = (props) => {\n    return (\n        <div className = {posts.item}>\n            <img src=\"https://sun9-52.userapi.com/c851120/v851120160/19fa57/I2WRc_mpc9E.jpg\" alt=\"\"/>\n            <div className = {posts.text}>\n                { props.message }\n            </div>\n            <div className = {posts.like}>Like { props.like} </div>\n        </div>\n    );\n}\n\nexport default Post;","import React from 'react';\nimport m from \"./MyPosts.module.css\"\nimport Post from \"./Post/Post\"\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, requiredField} from \"../../../Utils/Validation/validators\";\nimport {TextArea} from \"../../commons/FormsControls/FormsControls\";\n\n\nconst MyPosts = React.memo(props => {\n    console.log(\"render\");\n    let state = props.profilePage;\n    let postElements = state.postData.map(m => <Post message={m.message} key={m.id} like={m.like}/>)\n    let addPost = (values) => props.addPost(values.newPostText);\n\n    return (\n        <div className={m.wall}>\n            <div className={m.addPost}>\n                <h3>My Posts</h3>\n                <AddPostFormRedux onSubmit={addPost}/>\n            </div>\n            <div>\n                {postElements}\n            </div>\n        </div>\n    );\n});\n\nlet maxLength15 = maxLengthCreator(15);\nconst addPostForm = (props) => {\n\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field validate={[requiredField, maxLength15]} component={TextArea} name=\"newPostText\"\n                       placeholder={\"Enter text...\"}/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\nconst AddPostFormRedux = reduxForm({\n    form: 'addPost',\n})(addPostForm);\n\nexport default MyPosts;","import React from 'react';\nimport {addPostActionCreator} from \"../../../redux/profile-reduser\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\n\nlet mapStateToProps = (state) => {\n    return {\n        profilePage: state.profilePage\n    }\n}\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addPost: (newPostText) => {\n            dispatch(addPostActionCreator(newPostText))\n        },\n\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostsContainer;","import React from 'react';\nimport AvatarDescription from \"./AvatarDescription/AvatarDescription\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\nconst Profile = (props) => {\n    return (\n        <div>\n            <AvatarDescription\n                savePhoto={props.savePhoto}\n                isOwner={props.isOwner}\n                profile={props.profile}\n                status={props.status}\n                updateStatus={props.updateStatus}\n                saveProfile={props.saveProfile}/>\n            <MyPostsContainer />\n        </div>\n    );\n}\n\nexport default Profile;","import React from 'react';\nimport Profile from \"./Profile\";\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reduser\";\nimport {connect} from \"react-redux\";\nimport {withRouter} from \"react-router-dom\";\nimport {witchAuthRedirect} from \"../../hoc/authRedirect\";\nimport {compose} from \"redux\";\n\nclass ProfileContainer extends React.Component {\n\n    refreshProfile() {\n        let userID = this.props.match.params.userID;\n        if (!userID) {\n            userID = this.props.authorizedUserId;\n            if (!userID){\n                this.props.history.push(\"/login\")\n            }\n        }\n        this.props.getUserProfile(userID);\n        this.props.getStatus(userID);\n    }\n\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.props.match.params.userID != prevProps.match.params.userID)\n        this.refreshProfile();\n    }\n\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     isOwner={!this.props.match.params.userID}\n                     savePhoto={this.props.savePhoto}/>\n        );\n    }\n}\n\nlet mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth,\n\n});\n\nexport default compose(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter,\n    witchAuthRedirect\n)(ProfileContainer);\n\n"],"sourceRoot":""}